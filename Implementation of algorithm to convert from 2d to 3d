{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/IronAvenger11-prog/IITB_Internship/blob/main/Implementation%20of%20algorithm%20to%20convert%20from%202d%20to%203d\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4U_aHgJQCFW8"
      },
      "outputs": [],
      "source": [
        "def vset(x1,y1,x2,y2,x3,y3,x4,y4):\n",
        "  L1 = ((x1-x2)**2 +(y1-y2)**2)**0.5\n",
        "  L2 = ((x2-x3)**2 +(y2-y3)**2)**0.5\n",
        "  L3 = ((x3-x4)**2 +(y3-y4)**2)**0.5\n",
        "  L4 = ((x4-x1)**2 +(y4-y1)**2)**0.5\n",
        "  m1 = (y2-y1)/(x2-x1)\n",
        "  m2 = (y3-y2)/(x3-x2)\n",
        "  m3 = (y4-y3)/(x4-x3)\n",
        "  m4 = (y1-y4)/(x1-x4)\n",
        "  d1 = ((x1-x3)**2 + (y1-y3)**2)**0.5\n",
        "  d2 = ((x2-x4)**2 + (y2-y4)**2)**0.5\n",
        "\n",
        "  l0 = [L1, L2, L3, L4, m1, m2, m3, m4, d1, d2]\n",
        "\n",
        "  return l0\n",
        "\n",
        "  print(l0)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "B4gu255xEYDn"
      },
      "outputs": [],
      "source": [
        "v1 = vset(150,225,317,166,347,251,180,311)\n",
        " "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O-68qOnTEvp2",
        "outputId": "09123eaa-8a4e-4c72-ddbd-8a953528892e"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "[177.451401797788,\n",
              " 90.13878188659973,\n",
              " 177.451401797788,\n",
              " 90.13878188659973,\n",
              " -0.3592814371257485,\n",
              " 2.8333333333333335,\n",
              " -0.3592814371257485,\n",
              " 2.8333333333333335,\n",
              " 198.57995870681412,\n",
              " 199.48433522459854]"
            ]
          },
          "execution_count": 4,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        " v2 = vset(150,226,317,166,347,251,180,311)\n",
        "v2"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 165
        },
        "id": "-1xnPolxHniw",
        "outputId": "2ae0183b-9692-488e-a870-51887625a820"
      },
      "outputs": [
        {
          "ename": "NameError",
          "evalue": "ignored",
          "output_type": "error",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-5-0d473b8b0a13>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;34m(\u001b[0m\u001b[0mv1\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mv2\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'i' is not defined"
          ]
        }
      ],
      "source": [
        "(v1[i]-v2[i])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "RBNc--ahH0ZG"
      },
      "outputs": [],
      "source": [
        "import math\n",
        "\n",
        "\n",
        "A1 = v1[0]*v2[1]\n",
        "A2 = v2[0]*v2[1]\n",
        "\n",
        "#Assuming that the second arm is not moving about its own axis and A1 is the original area,\n",
        "\n",
        "axz = math.acos(A1/A2)\n",
        "#axy1 = math.degrees(math.atan(A1[4]))\n",
        "#axy2 = math.degrees(math.atan(A2[4]))\n",
        "print(math.degrees(axz))\n",
        "x_coordinate = A1[0]*math.cos(math.degrees(axz))\n",
        "z_coordinate = A1[0]*math.sin(math.degrees(axz))\n",
        "print(z_coordinate)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ABlUrVkkMRVw"
      },
      "outputs": [],
      "source": [
        "import math\n",
        "import sympy\n",
        "\n",
        "def jacobian(v,p,q):\n",
        "  j = diff(p,q)\n",
        "  return j\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LXEr_ATtlT0Z"
      },
      "outputs": [],
      "source": [
        "def centroid(x1,y1,x2,y2,x3,y3,x4,y4):\n",
        "  X = (x1+x2+x3+x4)/4\n",
        "  Y = (y1+y2+y3+y4)/4\n",
        "  return X, Y\n",
        "  print(X,Y)\n",
        "\n",
        "  "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qAoVmetUlsxh"
      },
      "outputs": [],
      "source": [
        "centroid(150,225,317,166,347,251,180,311)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PMGJYMh-lypG"
      },
      "outputs": [],
      "source": [
        "centroid(150,226,317,166,347,251,180,311)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lmehyygQl69r"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import math\n",
        "\n",
        "def roll(theta):\n",
        "  m = [1, 0, 0, 0, math.cos(theta), math.sin(theta)*(-1), 0, math.sin(theta), math.cos(theta)]\n",
        "  matrix = np.array(m)\n",
        "  print(matrix.reshape(3,3))\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "asWbGZh_nUC2"
      },
      "outputs": [],
      "source": [
        "roll(0)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "S9QIXH4gngHB"
      },
      "outputs": [],
      "source": [
        "roll(90)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QUs12_C8ns1S"
      },
      "outputs": [],
      "source": [
        "#Translation in 2D Projection\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import math\n",
        "t = 10\n",
        "\n",
        "(x1, y1, z1) = (math.sqrt(156), 3, 4)\n",
        "(x2, y2, z2) = (6, 9, 8)\n",
        "\n",
        "(X0,Y0) = (0,0)\n",
        "\n",
        "(X1, Y1) = (math.sqrt((x1)**2+(y1)**2), z1)\n",
        "(X2, Y2) = (math.sqrt((x2)**2+(y2)**2), z2)\n",
        "\n",
        "plt.plot([X0,X1],[Y0,Y1],'red')\n",
        "plt.plot([X0,X2],[Y0,Y2],'blue')\n",
        "\n",
        "plt.show()\n",
        "\n",
        "vp = math.sqrt((z1-z2)**2 + (math.sqrt(x1**2 + y1**2)-math.sqrt(x2**2+y2**2))**2)/t\n",
        "print(\"Projected Velocity will be\",vp)\n",
        "w = vp/(math.sqrt(x1**2 + y1**2 +z1**2))\n",
        "print(\"Roll is measured as\",w)\n",
        "theta = abs(math.atan(z1/math.sqrt(x1**2+y1**2))-math.atan(z2/math.sqrt(x2**2+y2**2)))\n",
        "print(\"Projected angle to be moved will be\", math.degrees(theta),\"degrees\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "HHyErfVmy6HE"
      },
      "outputs": [],
      "source": [
        "#Translation in 3D\n",
        "\n",
        "from mpl_toolkits import mplot3d\n",
        "\n",
        "from matplotlib import projections\n",
        "fig = plt.figure()\n",
        "ax = plt.axes(projection='3d')\n",
        "\n",
        "x1, y1, z1 = [0, math.sqrt(156)], [0, 3], [0, 4]\n",
        "x2, y2, z2 = [0, 6], [0, 9], [0, 8]\n",
        "\n",
        "ax.scatter(x1, y1, z1, c='black', s=100)\n",
        "ax.plot(x1, y1, z1, color='red')\n",
        "ax.scatter(x2, y2, z2, c='green', s=100)\n",
        "ax.plot(x2, y2, z2, color='blue')\n",
        "plt.show()\n",
        "\n",
        "plt.show()\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "A1pDf4rJ0-5E"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "from numpy import *\n",
        "x1 = 1\n",
        "x2 = 7\n",
        "y1 = 3\n",
        "\n",
        "y2 = 2\n",
        "z1 = 8\n",
        "z2 = 6\n",
        "\n",
        "\n",
        "P1 = array([[x1],[y1],[z1]])\n",
        "P2 = array([[x2],[y2],[z2]])\n",
        "\n",
        "print(P1, P2)\n",
        "print(P1 - P2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mscCJP6UYaNj"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import math\n",
        "\n",
        "def translation(tx, ty, tz):\n",
        "  a = np.matrix([[1,0,0,tx],[0,1,0,ty],[0,0,1,tz],[0,0,0,1]])\n",
        "  return a\n",
        "\n",
        "\n",
        "def roll(theta):\n",
        "  a = np.matrix([[1,0,0,0],[0,math.cos(math.degrees(theta)),(-1)*math.sin(math.degrees(theta)),0],[0,math.sin(math.degrees(theta)),math.cos(math.degrees(theta)),0],[0,0,0,1]])\n",
        "  return a\n",
        "\n",
        "def pitch(theta):\n",
        "  a = np.matrix([math.cos(math.degrees(theta)),0,math.sin(math.degrees(theta)),0],[0,1,0,0],[(-1)*math.sin(math.degrees(theta)),0,math.cos(math.degrees(theta)),0],[0,0,0,1])\n",
        "  return a\n",
        "def yaw(theta):\n",
        "  a = np.matrix([])\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "X0b_D-FRcD5j"
      },
      "outputs": [],
      "source": [
        "translation(0,1,2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LmpMBX6ncIXD"
      },
      "outputs": [],
      "source": [
        "\n",
        "roll(np.pi/2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "MSmGfRp6gbL2"
      },
      "outputs": [],
      "source": [
        "import math\n",
        "m1 = 2/3\n",
        "m2 = 5/7\n",
        "\n",
        "math.degrees(math.atan(abs(m1 - m2)/(1 + m1*m2)))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_zsrEcoCqEki"
      },
      "outputs": [],
      "source": [
        "#Points of the manipulator\n",
        "import math\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "(x0, y0, z0) = (0,0,0)\n",
        "\n",
        "(x1, y1, z1) = (int(input(\"x1 = \")),int(input(\"y1 = \")),int(input(\"z1 = \")))\n",
        "\n",
        "(x2, y2, z2) = (int(input(\"x2 = \")),int(input(\"y2 = \")),int(input(\"z2 = \"))) #end effector\n",
        "\n",
        "\n",
        "(x3, y3, z3) = (int(input(\"x3 = \")),int(input(\"y3 = \")),int(input(\"z3 = \")))#new position of end effector\n",
        "\n",
        "\n",
        "OA = math.sqrt((x1 - x0)**2 + (y1-y0)**2 + (z1 - z0)**2)\n",
        "AB = math.sqrt((x2 - x1)**2 + (y2-y1)**2 + (z2 - z1)**2)\n",
        "OC = math.sqrt((x3- x0)**2 + (y3-y0)**2 + (z3 - z0)**2)\n",
        "\n",
        "AC = math.sqrt((x3 - x1)**2 + (y3-y1)**2 + (z3 - z1)**2)\n",
        "\n",
        "\n",
        "\n",
        "def main():\n",
        "  if OC>(OA+AB):\n",
        "    print(\"Translate to O' S.T O'C = OA + AB. Then rotate S.T B meets C\")\n",
        "  elif OC == (OA+AB):\n",
        "    print(\"Rotate till B meets C\")\n",
        "  else:\n",
        "    if AC>AB:\n",
        "      print(\"Rotate OA inwards and then rotate AB until B meets C\")\n",
        "    elif AC == AB:\n",
        "      print(\"Rotate AB till B meets C\")\n",
        "    else:\n",
        "      print(\"Rotate OA outwards and then rotate AB until B meets C\")\n",
        "\n",
        "main()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "XJ0qzxWCAjLr"
      },
      "outputs": [],
      "source": [
        "#Points of the manipulator\n",
        "import math\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "(x0, y0, z0) = (0,0,0)\n",
        "\n",
        "(x1, y1, z1) = (int(input(\"x1 = \")),int(input(\"y1 = \")),int(input(\"z1 = \")))\n",
        "\n",
        "(x2, y2, z2) = (int(input(\"x2 = \")),int(input(\"y2 = \")),int(input(\"z2 = \"))) #end effector\n",
        "\n",
        "\n",
        "(x3, y3, z3) = (int(input(\"x3 = \")),int(input(\"y3 = \")),int(input(\"z3 = \")))#new position of end effector\n",
        "\n",
        "\n",
        "OA = math.sqrt((x1 - x0)**2 + (y1-y0)**2 + (z1 - z0)**2)\n",
        "AB = math.sqrt((x2 - x1)**2 + (y2-y1)**2 + (z2 - z1)**2)\n",
        "OC = math.sqrt((x3- x0)**2 + (y3-y0)**2 + (z3 - z0)**2)\n",
        "\n",
        "AC = math.sqrt((x3 - x1)**2 + (y3-y1)**2 + (z3 - z1)**2)\n",
        "\n",
        "def rotate(theta, nx, ny, nz, x1, y1, z1, x2, y2, z2):\n",
        "  \n",
        "\n",
        "def main():\n",
        "  if OC>(OA+AB):\n",
        "    print(\"Translate to O' S.T O'C = OA + AB. Then rotate S.T B meets C\")\n",
        "  elif OC == (OA+AB):\n",
        "    print(\"Rotate till B meets C\")\n",
        "  else:\n",
        "    if AC>AB:\n",
        "      print(\"Rotate OA inwards and then rotate AB until B meets C\")\n",
        "    elif AC == AB:\n",
        "      print(\"Rotate AB till B meets C\")\n",
        "    else:\n",
        "      print(\"Rotate OA outwards and then rotate AB until B meets C\")\n",
        "\n",
        "\n",
        "\n",
        "main()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "uJChwuy7QVkH"
      },
      "outputs": [],
      "source": [
        "import math\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "(x0, y0, z0) = (int(input(\"x0 = \")),int(input(\"y0 = \")),int(input(\"z0 = \")))\n",
        "\n",
        "(x1, y1, z1) = (int(input(\"x1 = \")),int(input(\"y1 = \")),int(input(\"z1 = \")))\n",
        "\n",
        "(x2, y2, z2) = (int(input(\"x2 = \")),int(input(\"y2 = \")),int(input(\"z2 = \")))\n",
        "\n",
        "V1 = math.sqrt((x1 - x0)**2 + (y1 - y0)**2 + (z1 - z0)**2)\n",
        "V2 = math.sqrt((x2 - x0)**2 + (y2 - y0)**2 + (z2 - z0)**2)\n",
        "\n",
        "v1 = math.sqrt((x1 - x0)**2 + (y1 - y0)**2)\n",
        "v2 = math.sqrt((x2 - x0)**2 + (y2 - y0)**2)\n",
        "\n",
        "\n",
        "\n",
        "alpha = math.acos(((x1 - x0)*(x2 - x0) + (y1 - y0)*(y2 - y0))/(v1*v2))\n",
        "\n",
        "print(\"Angle in 2D = \", math.degrees(alpha),\"degrees\")\n",
        "\n",
        "plt.plot([x1, x0], [y1, y0])\n",
        "plt.plot([x2, x0], [y2, y0])\n",
        "plt.figure(figsize=(15,15))\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "p9BFU6sqSL7O"
      },
      "outputs": [],
      "source": [
        "from matplotlib import pyplot as plt\n",
        "plt.rcParams[\"figure.figsize\"] = [10, 10]\n",
        "plt.rcParams[\"figure.autolayout\"] = True\n",
        "fig = plt.figure()\n",
        "ax = fig.add_subplot(projection=\"3d\")\n",
        "X1, Y1, Z1 = [x0, x1], [y0, y1], [z0, z1]\n",
        "X2, Y2, Z2 = [x0, x2], [y0, y2], [z0, z2]\n",
        "ax.scatter(X1, Y1, Z1, c='red', s=100)\n",
        "ax.plot(X1, Y1, Z1, color='blue')\n",
        "ax.scatter(X2, Y2, Z2, c='red', s=100)\n",
        "ax.plot(X2, Y2, Z2, color='orange')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "x-11sxezmPx_"
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import math\n",
        "def f(x1,y1,x2,y2,x3,y3,x4,y4):\n",
        "  x = [x1,x2,x3,x4,x1]\n",
        "  y = [y1,y2,y3,y4,y1]\n",
        "  \n",
        "  plt.plot(x,y)\n",
        "  \n",
        "\n",
        "def area(x1,y1,x2,y2,x3,y3,x4,y4):\n",
        "  A1 = 0.5*((x1*y2 + x2*y3 + x3*y4  + x4*y1 )-(x2*y1 + x3*y2 + x4*y3 + x1*y4))\n",
        "    \n",
        "  \n",
        "  print(\"Area:\", A1)\n",
        "\n",
        "def z_c(x1,y1,x2,y2,x3,y3,x4,y4):\n",
        "  A = area(x1,y1,x2,y2,x3,y3,x4,y4)\n",
        "  f = int(input(\"Focal length: \"))\n",
        "  s = int(input(\"Scale: \"))\n",
        "  z_c = math.sqrt((f**2)*(s**2)/A)\n",
        "  return z_c\n",
        "def angle(x1,y1,x2,y2,x3,y3,x4,y4):\n",
        "  m1 = (y2-y1)/(x2-x1)\n",
        "  m2 = (y3-y2)/(x3-x2)\n",
        "  m3 = (y4-y3)/(x4-x3)\n",
        "  m4 = (y1-y4)/(x1-x4)\n",
        "  th_1 = math.degrees(math.atan((m2-m1)/(1+m1*m2)))\n",
        "  th_2 = math.degrees(math.atan((m3-m2)/(1+m2*m3)))\n",
        "  th_3 = math.degrees(math.atan((m4-m3)/(1+m4*m3)))\n",
        "  th_4 = math.degrees(math.atan((m1-m4)/(1+m1*m4)))\n",
        "  a = [th_1,th_2,th_3,th_4]\n",
        "  return a"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "7AyR-QFqm03-",
        "outputId": "2c8927b6-fa80-47b5-870a-ca9493855e9e"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[[  0.           6.13457229 160.90525162   0.        ]\n",
            " [  0.           0.         221.64893413   0.        ]]\n"
          ]
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "#1) [414 274] [564 215] [595 292] [446 352]\n",
        "#2) [522 234] [718 130] [770 228] [574 331]\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import math\n",
        "import numpy as np\n",
        "\n",
        "\n",
        "f(414,274,564,215,595,292,446,352)\n",
        "f(522,234,718,130,770,228,574,331)\n",
        "l1 = [414,274,564,215,595,292,446,352]\n",
        "l2 = [522,234,718,130,770,228,574,331]\n",
        "mid_1 = [(l1[0]+l1[6])/2,(l1[1]+l1[7])/2]\n",
        "\n",
        "mid_2 = [(l1[4]+l1[2])/2,(l1[5]+l1[3])/2]\n",
        "\n",
        "mid_3 = [(l2[0]+l2[6])/2,(l2[1]+l2[7])/2]\n",
        "\n",
        "mid_4 = [(l2[4]+l2[2])/2,(l2[5]+l2[3])/2]\n",
        "\n",
        "(x_m1,y_m1) = (mid_1[0],mid_1[1])\n",
        "(x_m2,y_m2) = (mid_2[0],mid_2[1])\n",
        "(x_m3,y_m3) = (mid_3[0],mid_3[1])\n",
        "(x_m4,y_m4) = (mid_4[0],mid_4[1])\n",
        "\n",
        "X1 = [x_m1,x_m2]\n",
        "Y1 = [y_m1,y_m2]\n",
        "X2 = [x_m3,x_m4]\n",
        "Y2 = [y_m3,y_m4]\n",
        "plt.plot(X1,Y1)\n",
        "plt.plot(X2,Y2)\n",
        "\n",
        "\n",
        "L1 = math.sqrt((x_m1 - x_m2)**2 + (y_m1 - y_m2)**2)\n",
        "L2 = math.sqrt((x_m4 - x_m3)**2 + (y_m4 - y_m3)**2)\n",
        "sl1 = (y_m2 - y_m1)/(x_m2 - x_m1)\n",
        "sl2 = (y_m4 - y_m3)/(x_m4 - x_m3)\n",
        "\n",
        "th_1 = math.atan(sl1)\n",
        "th_2 = math.atan(sl2)\n",
        "\n",
        "M = np.matrix([[0, math.degrees(abs(th_1-th_2)), L1, 0],[0, 0, L2, 0]])\n",
        "\n",
        "print(M)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FITCezrduUwm",
        "outputId": "80d265f0-17bf-4b2b-9782-56d3cff822e5"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Area: 65243.0\n"
          ]
        }
      ],
      "source": [
        "area(259,145,698,-47,753,77,314,270)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cxUqRVBO9IxK",
        "outputId": "38459812-d46c-4679-a9e1-7b4ecd3ae18e"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Area: 63486.0\n"
          ]
        }
      ],
      "source": [
        "area(264,144,698,-46,752,76,319, 267)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u4ftXb1_9rWV",
        "outputId": "1addc210-78f3-4ac1-ffd6-f34e43dbb8fa"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "13.327111469644644"
            ]
          },
          "execution_count": 5,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "import math\n",
        "\n",
        "th_r = math.acos(63486/65243)\n",
        "math.degrees(th_r)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H3mqpT6c-tns",
        "outputId": "2d32d662-fecb-457f-9c6c-f6480960f097"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "(2.25, 'i', '+', -1.0, 'j') 2.462214450449026 [2.25, -1.0]\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "matrix([[ 1.        ,  0.        ,  0.        ,  2.25      ],\n",
              "        [ 0.        ,  1.        ,  0.        , -1.        ],\n",
              "        [ 0.        ,  0.        ,  1.        , 52.35603849],\n",
              "        [ 0.        ,  0.        ,  0.        ,  1.        ]])"
            ]
          },
          "execution_count": 33,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "import math\n",
        "import numpy as np\n",
        "def transl_2d_3d(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8):\n",
        "  cent_xi = (x1 + x2 + x3 + x4)/4 \n",
        "  cent_yi = (y1 + y2 + y3 + y4)/4\n",
        "  cent_xf = (x5 + x6 + x7 + x8)/4\n",
        "  cent_yf = (y5 + y6 + y7 + y8)/4\n",
        "  x_move = cent_xf - cent_xi\n",
        "  y_move = cent_yf - cent_yi\n",
        "  lo = [x_move,y_move]\n",
        "  d = math.sqrt((cent_xf - cent_xi)**2 + (cent_yf - cent_yi)**2)\n",
        "  vec = x_move,\"i\",'+',y_move,\"j\"\n",
        "  print(vec,d,lo)\n",
        "  A1 = 0.5*((x1*y2 + x2*y3 + x3*y4  + x4*y1 )-(x2*y1 + x3*y2 + x4*y3 + x1*y4))\n",
        "  A2 = 0.5*((x5*y6 + x6*y7 + x7*y8  + x8*y5 )-(x6*y5 + x7*y6 + x8*y7 + x5*y8))\n",
        "  f = 1000000\n",
        "  s = A2/A1\n",
        "  z1 = math.sqrt((f**2)*(s**2)/A1)\n",
        "  z2 = math.sqrt((f**2)*(s**2)/A2)\n",
        "  z_move = z2 - z1\n",
        "  M = np.matrix([[1, 0, 0, x_move],[0, 1, 0, y_move],[0, 0, 1, z_move],[0, 0, 0, 1]])\n",
        "  return M\n",
        "\n",
        "\n",
        "\n",
        "transl_2d_3d(259,145,698,-47,753,77,314,270,264,144,698,-46,752,76,319, 267)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NVDdWz_gO20T",
        "outputId": "d18c2e39-3b4e-4bfb-df56-c6833ec821fc"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "(-2.0, 'i', '+', 1.75, 'j') 2.6575364531836625 [-2.0, 1.75]\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "matrix([[  1.        ,   0.        ,   0.        ,  -2.        ],\n",
              "        [  0.        ,   1.        ,   0.        ,   1.75      ],\n",
              "        [  0.        ,   0.        ,   1.        , -29.45388939],\n",
              "        [  0.        ,   0.        ,   0.        ,   1.        ]])"
            ]
          },
          "execution_count": 29,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "#339,360,718,162,782,284,402,482\n",
        "#335,363,718,162,782,285,398,485\n",
        "transl_2d_3d(339,360,718,162,782,284,402,482,335,363,718,162,782,285,398,485)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ScGiaUA9Wgg0",
        "outputId": "2f823a0e-a3f3-43fd-953e-508ab4fea125"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "matrix([[ 9.99999642e-01, -8.46211784e-04,  0.00000000e+00,\n",
              "          0.00000000e+00],\n",
              "        [-7.76135141e-04, -9.17187491e-01, -3.98455148e-01,\n",
              "          0.00000000e+00],\n",
              "        [ 3.37177442e-04,  3.98455005e-01, -9.17187819e-01,\n",
              "          0.00000000e+00],\n",
              "        [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
              "          1.00000000e+00]])"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ],
      "source": [
        "import math\n",
        "import numpy as np\n",
        "\n",
        "def rot(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8):\n",
        "  #A1 = 0.5*((x1*y2 + x2*y3 + x3*y4  + x4*y1 )-(x2*y1 + x3*y2 + x4*y3 + x1*y4))\n",
        "  #A2 = 0.5*((x5*y6 + x6*y7 + x7*y8  + x8*y5 )-(x6*y5 + x7*y6 + x8*y7 + x5*y8))\n",
        "  #th_r = math.acos(A1/A2)\n",
        "  m1i = (y2-x1)/(x2-x1) \n",
        "  m2i = (y3-x2)/(x3-x2)\n",
        "  m3i = (y4-x3)/(x4-x3)\n",
        "  m4i = (y1-x4)/(x1-x4)\n",
        "  m1f = (y6-x5)/(x6-x5) \n",
        "  m2f = (y7-x6)/(x7-x6)\n",
        "  m3f = (y8-y7)/(x8-x7)\n",
        "  m4f = (y5-y8)/(x5-x8)\n",
        "  l1 = [m1i,m2i,m3i,m4i]\n",
        "  a = 0\n",
        "  for i in range(len(l1)):\n",
        "    a = a + math.atan(l1[i])\n",
        "  th_ri = (180-math.degrees(a))/4\n",
        "  l2 = [m1f,m2f,m3f,m4f]\n",
        "  b = 0\n",
        "  for i in range(len(l2)):\n",
        "    b = b + math.atan(l2[i])\n",
        "  th_rf = (180-math.degrees(b))/4\n",
        "  th_r = th_rf - th_ri\n",
        "  mid_x1i = (x1 + x4)/2\n",
        "  mid_y1i = (y1 + y4)/2\n",
        "  mid_x2i = (x2 + x3)/2\n",
        "  mid_y2i = (y2 + y3)/2\n",
        "  sli = (mid_y2i-mid_y1i)/(mid_x2i-mid_x1i)\n",
        "  mid_x1f = (x5 + x8)/2\n",
        "  mid_y1f = (y5 + y8)/2\n",
        "  mid_x2f = (x6 + x7)/2\n",
        "  mid_y2f = (y6 + y7)/2\n",
        "  slf = (mid_y2f-mid_y1f)/(mid_x2f-mid_x1f)\n",
        "  th_y = math.atan(abs(slf - sli)/(1 + slf*sli))\n",
        "  m1i = (y2-x1)/(x2-x1) \n",
        "  m2i = (y3-x2)/(x3-x2)\n",
        "  m3i = (y4-x3)/(x4-x3)\n",
        "  m4i = (y1-x4)/(x1-x4)\n",
        "  a1i = math.atan(abs(m2i-m1i)/(1+m2i*m1i))\n",
        "  m1f = (y6-x5)/(x6-x5) \n",
        "  m2f = (y7-x6)/(x7-x6)\n",
        "  a1f = a1i = math.atan(abs(m2f-m1f)/(1+m2f*m1f))\n",
        "  th_p = a1f - a1i\n",
        "  M_r = np.matrix([[1,0,0,0],[0,math.cos(th_r),-math.sin(th_r),0],[0,math.sin(th_r),math.cos(th_r),0],[0,0,0,1]])\n",
        "  M_y = np.matrix([[math.cos(th_y),-math.sin(th_y),0,0],[math.sin(th_y),math.cos(th_y),0,0],[0,0,1,0],[0,0,0,1]])\n",
        "  M_p = np.matrix([[math.cos(th_p),0,math.sin(th_p),0],[0,1,0,0],[-math.sin(th_p),0,math.cos(th_p),0],[0,0,0,1]])\n",
        "  M_t = M_r*M_p*M_y\n",
        "  return M_t\n",
        "\n",
        "rot(339,360,718,162,782,284,402,482,335,363,718,162,782,285,398,485)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rakGogPTl5tT",
        "outputId": "6a22b6ec-d38d-4f77-abc9-920d2629116f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "matrix([[-0.91540353, -0.40215081,  0.01763809,  0.        ],\n",
              "        [ 0.37533966, -0.83690085,  0.39839316,  0.        ],\n",
              "        [-0.1454528 ,  0.37131078,  0.91704514,  0.        ],\n",
              "        [ 0.        ,  0.        ,  0.        ,  1.        ]])"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ],
      "source": [
        "import math\n",
        "import numpy as np\n",
        "\n",
        "def rot_o(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8):\n",
        "  m1i = (y2-x1)/(x2-x1) \n",
        "  m2i = (y3-x2)/(x3-x2)\n",
        "  m3i = (y4-x3)/(x4-x3)\n",
        "  m4i = (y1-x4)/(x1-x4)\n",
        "  m1f = (y6-x5)/(x6-x5) \n",
        "  m2f = (y7-x6)/(x7-x6)\n",
        "  m3f = (y8-y7)/(x8-x7)\n",
        "  m4f = (y5-y8)/(x5-x8)\n",
        "  l1 = [m1i,m2i,m3i,m4i]\n",
        "  a = 0\n",
        "  for i in range(len(l1)):\n",
        "    a = a + math.atan(l1[i])\n",
        "  th_ri = (180-math.degrees(a))/4\n",
        "  l2 = [m1f,m2f,m3f,m4f]\n",
        "  b = 0\n",
        "  for i in range(len(l2)):\n",
        "    b = b + math.atan(l2[i])\n",
        "  th_rf = (180-math.degrees(b))/4\n",
        "  th_r = th_rf - th_ri\n",
        "   \n",
        "  a1i = math.atan(abs(m2i-m1i)/(1+m2i*m1i))\n",
        "  a2i = math.atan(abs(m3i-m2i)/(1+m3i*m2i))\n",
        "  a3i = math.atan(abs(m4i-m3i)/(1+m4i*m3i))\n",
        "  a4i = math.atan(abs(m1i-m4i)/(1+m1i*m4i))\n",
        "\n",
        "  a1f = math.atan(abs(m2f-m1f)/(1+m2f*m1f))\n",
        "  a2f = math.atan(abs(m3f-m2f)/(1+m3f*m2f))\n",
        "  a3f = math.atan(abs(m4f-m3f)/(1+m4f*m3f))\n",
        "  a4f = math.atan(abs(m1f-m4f)/(1+m1f*m4f))\n",
        "\n",
        "  ey_i = a1i + a4i - a2i - a3i\n",
        "  ey_f = a1f + a2f - a2f - a3f\n",
        "\n",
        "  th_y = ey_f - ey_i\n",
        "\n",
        "  ep_i = a3i + a4i - a1i - a2i\n",
        "  ep_f = a3f + a4f - a1f - a2f\n",
        "\n",
        "  th_p = ep_f - ep_i\n",
        "  M_r = np.matrix([[1,0,0,0],[0,math.cos(th_r),-math.sin(th_r),0],[0,math.sin(th_r),math.cos(th_r),0],[0,0,0,1]])\n",
        "  M_y = np.matrix([[math.cos(th_y),-math.sin(th_y),0,0],[math.sin(th_y),math.cos(th_y),0,0],[0,0,1,0],[0,0,0,1]])\n",
        "  M_p = np.matrix([[math.cos(th_p),0,math.sin(th_p),0],[0,1,0,0],[-math.sin(th_p),0,math.cos(th_p),0],[0,0,0,1]])\n",
        "  M_t = M_r*M_p*M_y\n",
        "  return M_t\n",
        "\n",
        "rot_o(339,360,718,162,782,284,402,482,335,363,718,162,782,285,398,485)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A2W4LZPLtT8k",
        "outputId": "26de992c-0c3e-4f29-a468-19031a84eb28"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(0.25, 'i', '+', -0.25, 'j') 0.3535533905932738 [0.25, -0.25]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "matrix([[ 1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
              "          2.50000000e-01],\n",
              "        [ 0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n",
              "         -2.50000000e-01],\n",
              "        [ 0.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n",
              "          5.58835661e-06],\n",
              "        [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
              "          1.00000000e+00]])"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ],
      "source": [
        "#image 20 304,375,718,154,787,283,373,503 61.99082565307617\n",
        "#image 20 175,360,369,360,369,460,175,460 90.0\n",
        "#image 21 305,374,718,154,787,283,373,503 61.99081802368164\n",
        "#image 21 175,360,369,360,369,460,175,460 90.0\n",
        "\n",
        "T = transl_2d_3d(304,375,718,154,787,283,373,503,305,374,718,154,787,283,373,503)\n",
        "T"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w-4USSyf-R1H",
        "outputId": "50d60f2d-d263-4345-c2ae-3fc624a50983"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "matrix([[ 9.99999903e-01, -4.40375198e-04,  0.00000000e+00,\n",
              "          0.00000000e+00],\n",
              "        [ 3.16581909e-04,  7.18891255e-01, -6.95122481e-01,\n",
              "          0.00000000e+00],\n",
              "        [ 3.06114700e-04,  6.95122413e-01,  7.18891325e-01,\n",
              "          0.00000000e+00],\n",
              "        [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
              "          1.00000000e+00]])"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ],
      "source": [
        "R = rot(304,375,718,154,787,283,373,503,305,374,718,154,787,283,373,503)\n",
        "R"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gIbS7HqLA0Gk",
        "outputId": "a680fda6-0a1a-43e8-d6f2-ef27af2b47f5"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "matrix([[ 9.99999903e-01, -4.40375198e-04,  0.00000000e+00,\n",
              "          2.50000000e-01],\n",
              "        [ 3.16581909e-04,  7.18891255e-01, -6.95122481e-01,\n",
              "         -2.50000000e-01],\n",
              "        [ 3.06114700e-04,  6.95122413e-01,  7.18891325e-01,\n",
              "          5.58835661e-06],\n",
              "        [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
              "          1.00000000e+00]])"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ],
      "source": [
        "M = T*R\n",
        "M"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_mB0pmnIA1r0"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "\n",
        "(x1,y1,z1) = (304,375,0)\n",
        "(x2,y2,z2) = (718,154,0) \n",
        "(x3,y3,z3) = (787,283,0)\n",
        "(x4,y4,z4) = (373,503,0)\n",
        "\n",
        "P1 = np.matrix([[x1],[y1],[z1],[1]])\n",
        "P2 = np.matrix([[x2],[y2],[z2],[1]])\n",
        "P3 = np.matrix([[x3],[y3],[z3],[1]])\n",
        "P4 = np.matrix([[x4],[y4],[z4],[1]])\n",
        "\n",
        "P1_o = M*P1\n",
        "P2_o = M*P2\n",
        "P3_o = M*P3\n",
        "P4_o = M*P4\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 248
        },
        "id": "B-SdBTWlGkng",
        "outputId": "ae888635-d6cd-4176-9dd6-5db56923c993"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "from mpl_toolkits.mplot3d import Axes3D\n",
        "\n",
        "fig = plt.figure()\n",
        "\n",
        "ax = plt.axes(projection='3d')\n",
        "\n",
        "X_i = [x1, x2, x3, x4]\n",
        "Y_i = [y1, y2, y3, y4]\n",
        "Z_i = [z1, z2, z3, z4]\n",
        "X_f = [P1_o[0],P2_o[0],P3_o[0],P4_o[0]]\n",
        "Y_f = [P1_o[1],P2_o[1],P3_o[1],P4_o[1]]\n",
        "Z_f = [P1_o[2],P2_o[2],P3_o[2],P4_o[2]]\n",
        "ax.scatter3D(X_i,Y_i,Z_i,c='red', s=100);\n",
        "ax.scatter3D(X_f,Y_f,Z_f,c='blue', s=100);\n",
        "ax.set_xlabel('x-axis')\n",
        "ax.set_ylabel('y-axis')\n",
        "ax.set_zlabel('z-axis')\n",
        "\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LUI8xNfRLvvv"
      },
      "outputs": [],
      "source": [
        "#Algorithm for producing 3d orientation from 2d coordinates\n",
        "\n",
        "import math\n",
        "\n",
        "import numpy as np\n",
        "\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "from mpl_toolkits.mplot3d import Axes3D\n",
        "\n",
        "\n",
        "def transl_2d_3d(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8):\n",
        "  cent_xi = (x1 + x2 + x3 + x4)/4 \n",
        "  cent_yi = (y1 + y2 + y3 + y4)/4\n",
        "  cent_xf = (x5 + x6 + x7 + x8)/4\n",
        "  cent_yf = (y5 + y6 + y7 + y8)/4\n",
        "  x_move = cent_xf - cent_xi\n",
        "  y_move = cent_yf - cent_yi\n",
        "  lo = [x_move,y_move]\n",
        "  d = math.sqrt((cent_xf - cent_xi)**2 + (cent_yf - cent_yi)**2)\n",
        "  vec = x_move,\"i\",'+',y_move,\"j\"\n",
        "  print(vec,d,lo)\n",
        "  A1 = 0.5*((x1*y2 + x2*y3 + x3*y4  + x4*y1)-(x2*y1 + x3*y2 + x4*y3 + x1*y4))\n",
        "  A2 = 0.5*((x5*y6 + x6*y7 + x7*y8  + x8*y5)-(x6*y5 + x7*y6 + x8*y7 + x5*y8))\n",
        "  f = 100\n",
        "  s = A2/A1\n",
        "  z1 = math.sqrt((f**2)*(s**2)/A1)\n",
        "  z2 = math.sqrt((f**2)*(s**2)/A2)\n",
        "  z_move = z2 - z1\n",
        "  M = np.matrix([[1, 0, 0, x_move],[0, 1, 0, y_move],[0, 0, 1, z_move],[0, 0, 0, 1]])\n",
        "  return M\n",
        "\n",
        "\n",
        "def rot(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8):\n",
        "  #A1 = 0.5*((x1*y2 + x2*y3 + x3*y4  + x4*y1 )-(x2*y1 + x3*y2 + x4*y3 + x1*y4))\n",
        "  #A2 = 0.5*((x5*y6 + x6*y7 + x7*y8  + x8*y5 )-(x6*y5 + x7*y6 + x8*y7 + x5*y8))\n",
        "  #th_r = math.acos(A1/A2)\n",
        "  m1i = (y2-x1)/(x2-x1) \n",
        "  m2i = (y3-x2)/(x3-x2)\n",
        "  m3i = (y4-x3)/(x4-x3)\n",
        "  m4i = (y1-x4)/(x1-x4)\n",
        "  m1f = (y6-x5)/(x6-x5) \n",
        "  m2f = (y7-x6)/(x7-x6)\n",
        "  m3f = (y8-y7)/(x8-x7)\n",
        "  m4f = (y5-y8)/(x5-x8)\n",
        "  l1 = [m1i,m2i,m3i,m4i]\n",
        "  l1_o = [math.atan(m1i),math.atan(m2i),math.atan(m3i),math.atan(m4i)]\n",
        "  a = math.degrees(l1_o[0]+l1_o[1]+l1_o[2]+l1_o[3])\n",
        "  th_ri = (180-math.degrees(a))/4\n",
        "  l2 = [m1f,m2f,m3f,m4f]\n",
        "  l2_o = [math.atan(m1f),math.atan(m2f),math.atan(m3f),math.atan(m4f)]\n",
        "  b = math.degrees(l2_o[0]+l2_o[1]+l2_o[2]+l2_o[3])\n",
        "  th_rf = (180-math.degrees(b))/4\n",
        "  th_r = th_rf - th_ri\n",
        "  mid_x1i = (x1 + x4)/2\n",
        "  mid_y1i = (y1 + y4)/2\n",
        "  mid_x2i = (x2 + x3)/2\n",
        "  mid_y2i = (y2 + y3)/2\n",
        "  sli = (mid_y2i-mid_y1i)/(mid_x2i-mid_x1i)\n",
        "  mid_x1f = (x5 + x8)/2\n",
        "  mid_y1f = (y5 + y8)/2\n",
        "  mid_x2f = (x6 + x7)/2\n",
        "  mid_y2f = (y6 + y7)/2\n",
        "  slf = (mid_y2f-mid_y1f)/(mid_x2f-mid_x1f)\n",
        "  th_y = math.atan(abs(slf - sli)/(1 + slf*sli))\n",
        "  \n",
        "  a1i = math.atan(abs(m2i-m1i)/(1+m2i*m1i))\n",
        "  \n",
        "  a1f = a1i = math.atan(abs(m2f-m1f)/(1+m2f*m1f))\n",
        "  th_p = a1f - a1i\n",
        "  M_r = np.matrix([[1,0,0,0],[0,math.cos(th_r),-math.sin(th_r),0],[0,math.sin(th_r),math.cos(th_r),0],[0,0,0,1]])\n",
        "  M_y = np.matrix([[math.cos(th_y),-math.sin(th_y),0,0],[math.sin(th_y),math.cos(th_y),0,0],[0,0,1,0],[0,0,0,1]])\n",
        "  M_p = np.matrix([[math.cos(th_p),0,math.sin(th_p),0],[0,1,0,0],[-math.sin(th_p),0,math.cos(th_p),0],[0,0,0,1]])\n",
        "  M_t = M_r*M_p*M_y\n",
        "  return M_t\n",
        "\n",
        "def rot_o(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8):\n",
        "  m1i = (y2-x1)/(x2-x1) \n",
        "  m2i = (y3-x2)/(x3-x2)\n",
        "  m3i = (y4-x3)/(x4-x3)\n",
        "  m4i = (y1-x4)/(x1-x4)\n",
        "  m1f = (y6-x5)/(x6-x5) \n",
        "  m2f = (y7-x6)/(x7-x6)\n",
        "  m3f = (y8-y7)/(x8-x7)\n",
        "  m4f = (y5-y8)/(x5-x8)\n",
        "  l1 = [m1i,m2i,m3i,m4i]\n",
        "  a = 0\n",
        "  for i in range(len(l1)):\n",
        "    a = a + math.atan(l1[i])\n",
        "  th_ri = (180-math.degrees(a))/4\n",
        "  l2 = [m1f,m2f,m3f,m4f]\n",
        "  b = 0\n",
        "  for i in range(len(l2)):\n",
        "    b = b + math.atan(l2[i])\n",
        "  th_rf = (180-math.degrees(b))/4\n",
        "  th_r = th_rf - th_ri\n",
        "   \n",
        "  a1i = math.atan(abs(m2i-m1i)/(1+m2i*m1i))\n",
        "  a2i = math.atan(abs(m3i-m2i)/(1+m3i*m2i))\n",
        "  a3i = math.atan(abs(m4i-m3i)/(1+m4i*m3i))\n",
        "  a4i = math.atan(abs(m1i-m4i)/(1+m1i*m4i))\n",
        "\n",
        "  a1f = math.atan(abs(m2f-m1f)/(1+m2f*m1f))\n",
        "  a2f = math.atan(abs(m3f-m2f)/(1+m3f*m2f))\n",
        "  a3f = math.atan(abs(m4f-m3f)/(1+m4f*m3f))\n",
        "  a4f = math.atan(abs(m1f-m4f)/(1+m1f*m4f))\n",
        "\n",
        "  ey_i = a1i + a4i - a2i - a3i\n",
        "  ey_f = a1f + a2f - a2f - a3f\n",
        "\n",
        "  th_y = ey_f - ey_i\n",
        "\n",
        "  ep_i = a3i + a4i - a1i - a2i\n",
        "  ep_f = a3f + a4f - a1f - a2f\n",
        "\n",
        "  th_p = ep_f - ep_i\n",
        "  M_r = np.matrix([[1,0,0,0],[0,math.cos(th_r),-math.sin(th_r),0],[0,math.sin(th_r),math.cos(th_r),0],[0,0,0,1]])\n",
        "  M_y = np.matrix([[math.cos(th_y),-math.sin(th_y),0,0],[math.sin(th_y),math.cos(th_y),0,0],[0,0,1,0],[0,0,0,1]])\n",
        "  M_p = np.matrix([[math.cos(th_p),0,math.sin(th_p),0],[0,1,0,0],[-math.sin(th_p),0,math.cos(th_p),0],[0,0,0,1]])\n",
        "  M_t = M_r*M_p*M_y\n",
        "  \n",
        "  fr = 30\n",
        "  w_r = (1/fr)*th_r\n",
        "  w_p = (1/fr)*th_p\n",
        "  w_y = (1/fr)*th_y\n",
        "  L_w = [w_r,w_p,w_y]\n",
        "\n",
        "\n",
        "\n",
        "  return M_t\n",
        "\n",
        "\n",
        "def v(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8):\n",
        "  fr = 30\n",
        "  M1 = transl_2d_3d(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8)\n",
        "  M1_p = (1/fr)*M1\n",
        "  return M1\n",
        "\n",
        "\n",
        "\n",
        "def algorithm(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8):\n",
        "  T = transl_2d_3d(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8)\n",
        "  R = rot(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8)\n",
        "  M = T*R\n",
        "  V = v(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8)\n",
        "\n",
        "\n",
        "  P1 = np.matrix([[x1],[y1],[z1],[1]])\n",
        "  P2 = np.matrix([[x2],[y2],[z2],[1]])\n",
        "  P3 = np.matrix([[x3],[y3],[z3],[1]])\n",
        "  P4 = np.matrix([[x4],[y4],[z4],[1]])\n",
        "\n",
        "  P1_o = M*P1\n",
        "  P2_o = M*P2\n",
        "  P3_o = M*P3\n",
        "  P4_o = M*P4  \n",
        "\n",
        "  fig = plt.figure()\n",
        "\n",
        "  ax = plt.axes(projection='3d')\n",
        "\n",
        "  X_i = [x1, x2, x3, x4] \n",
        "  Y_i = [y1, y2, y3, y4]\n",
        "  Z_i = [z1, z2, z3, z4]\n",
        "  X_f = [P1_o[0],P2_o[0],P3_o[0],P4_o[0]]\n",
        "  Y_f = [P1_o[1],P2_o[1],P3_o[1],P4_o[1]]\n",
        "  Z_f = [P1_o[2],P2_o[2],P3_o[2],P4_o[2]]\n",
        "  ax.scatter3D(X_i,Y_i,Z_i,c='red', s=100);\n",
        "  ax.scatter3D(X_f,Y_f,Z_f,c='blue', s=100);\n",
        "  ax.set_xlabel('x-axis')\n",
        "  ax.set_ylabel('y-axis')\n",
        "  ax.set_zlabel('z-axis')\n",
        "\n",
        "  plt.show()\n",
        "  return M,V\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 356
        },
        "id": "ZSPh2MSjOE0r",
        "outputId": "b5272334-0df8-4578-f752-0f4f7e654cd8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(2.0, 'i', '+', -2.0, 'j') 2.8284271247461903 [2.0, -2.0]\n",
            "(2.0, 'i', '+', -2.0, 'j') 2.8284271247461903 [2.0, -2.0]\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-6-b54e986a95fe>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m#image 27 [177 418] [208 315] [380 367] [349 470] 16.798370361328125\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0malgorithm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m175\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m420\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m206\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m317\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m378\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m369\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m347\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m472\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m177\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m418\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m208\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m315\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m380\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m367\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m349\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m470\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-5-73c9668d3bbb>\u001b[0m in \u001b[0;36malgorithm\u001b[0;34m(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6, x7, y7, x8, y8)\u001b[0m\n\u001b[1;32m    147\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    148\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 149\u001b[0;31m   \u001b[0mP1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmatrix\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mx1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0my1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mz1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    150\u001b[0m   \u001b[0mP2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmatrix\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mx2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0my2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mz2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    151\u001b[0m   \u001b[0mP3\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmatrix\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mx3\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0my3\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mz3\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'z1' is not defined"
          ]
        }
      ],
      "source": [
        "##image 26 [307 372] [718 153] [787 281] [376 500] 61.98210144042969\n",
        "#image 26 [175 420] [206 317] [378 369] [347 472] 16.75026512145996\n",
        "#image 27 [309 370] [718 152] [786 280] [377 497] 62.02052688598633\n",
        "#image 27 [177 418] [208 315] [380 367] [349 470] 16.798370361328125\n",
        "\n",
        "algorithm(175,420,206,317,378,369,347,472,177,418,208,315,380,367,349,470)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "VpHsTkpvOcMg"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "\n",
        "data = pd.read_csv(\"action_dataset_images.csv\")\n",
        "df = pd.DataFrame(data)\n",
        "for ind in df.index:\n",
        "  x1 = df['x1'][ind]\n",
        "  y1 = df['y1'][ind]\n",
        "  x2 = df['x2'][ind]\n",
        "  y2 = df['y2'][ind]\n",
        "  x3 = df['x3'][ind]\n",
        "  y3 = df['y3'][ind]\n",
        "  x4 = df['x4'][ind]\n",
        "  y4 = df['y4'][ind]\n",
        "  A = 0.5*((x1*y2 + x2*y3 + x3*y4  + x4*y1 )-(x2*y1 + x3*y2 + x4*y3 + x1*y4))\n",
        "  if A == 0:\n",
        "    df.drop(df.index[ind])\n",
        "  else:\n",
        "    continue"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "aQ5Tx-epm9Av",
        "outputId": "46791e63-c27b-4853-cd2b-86a650ec6c11"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Count  Image Number   x1   y1   x2   y2   x3   y3   x4   y4      angle\n",
              "0         0             0  259  145  698  -47  753   77  314  270  66.217964\n",
              "1         1             0  150  225  317  166  347  251  180  311  70.416008\n",
              "2         2             1  259  145  698  -47  753   77  314  270  66.223656\n",
              "3         3             1  150  226  317  166  347  251  180  311  70.312881\n",
              "4         4             2  259  145  698  -47  753   77  314  270  66.225143\n",
              "...     ...           ...  ...  ...  ...  ...  ...  ...  ...  ...        ...\n",
              "2656   2656          1122  264  324  443  324  443  414  264  414  90.000000\n",
              "2657   2657          1123  377  340  718  162  778  276  437  454  62.439392\n",
              "2658   2658          1123  252  351  428  316  446  406  270  441  78.690071\n",
              "2659   2659          1124  375  341  718  162  778  276  435  456  62.423409\n",
              "2660   2660          1124  250  358  423  315  446  405  272  448  75.963760\n",
              "\n",
              "[2661 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7dc78dbb-dad7-450a-b41b-849c32967516\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Count</th>\n",
              "      <th>Image Number</th>\n",
              "      <th>x1</th>\n",
              "      <th>y1</th>\n",
              "      <th>x2</th>\n",
              "      <th>y2</th>\n",
              "      <th>x3</th>\n",
              "      <th>y3</th>\n",
              "      <th>x4</th>\n",
              "      <th>y4</th>\n",
              "      <th>angle</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>259</td>\n",
              "      <td>145</td>\n",
              "      <td>698</td>\n",
              "      <td>-47</td>\n",
              "      <td>753</td>\n",
              "      <td>77</td>\n",
              "      <td>314</td>\n",
              "      <td>270</td>\n",
              "      <td>66.217964</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>150</td>\n",
              "      <td>225</td>\n",
              "      <td>317</td>\n",
              "      <td>166</td>\n",
              "      <td>347</td>\n",
              "      <td>251</td>\n",
              "      <td>180</td>\n",
              "      <td>311</td>\n",
              "      <td>70.416008</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>259</td>\n",
              "      <td>145</td>\n",
              "      <td>698</td>\n",
              "      <td>-47</td>\n",
              "      <td>753</td>\n",
              "      <td>77</td>\n",
              "      <td>314</td>\n",
              "      <td>270</td>\n",
              "      <td>66.223656</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>150</td>\n",
              "      <td>226</td>\n",
              "      <td>317</td>\n",
              "      <td>166</td>\n",
              "      <td>347</td>\n",
              "      <td>251</td>\n",
              "      <td>180</td>\n",
              "      <td>311</td>\n",
              "      <td>70.312881</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>259</td>\n",
              "      <td>145</td>\n",
              "      <td>698</td>\n",
              "      <td>-47</td>\n",
              "      <td>753</td>\n",
              "      <td>77</td>\n",
              "      <td>314</td>\n",
              "      <td>270</td>\n",
              "      <td>66.225143</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2656</th>\n",
              "      <td>2656</td>\n",
              "      <td>1122</td>\n",
              "      <td>264</td>\n",
              "      <td>324</td>\n",
              "      <td>443</td>\n",
              "      <td>324</td>\n",
              "      <td>443</td>\n",
              "      <td>414</td>\n",
              "      <td>264</td>\n",
              "      <td>414</td>\n",
              "      <td>90.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2657</th>\n",
              "      <td>2657</td>\n",
              "      <td>1123</td>\n",
              "      <td>377</td>\n",
              "      <td>340</td>\n",
              "      <td>718</td>\n",
              "      <td>162</td>\n",
              "      <td>778</td>\n",
              "      <td>276</td>\n",
              "      <td>437</td>\n",
              "      <td>454</td>\n",
              "      <td>62.439392</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2658</th>\n",
              "      <td>2658</td>\n",
              "      <td>1123</td>\n",
              "      <td>252</td>\n",
              "      <td>351</td>\n",
              "      <td>428</td>\n",
              "      <td>316</td>\n",
              "      <td>446</td>\n",
              "      <td>406</td>\n",
              "      <td>270</td>\n",
              "      <td>441</td>\n",
              "      <td>78.690071</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2659</th>\n",
              "      <td>2659</td>\n",
              "      <td>1124</td>\n",
              "      <td>375</td>\n",
              "      <td>341</td>\n",
              "      <td>718</td>\n",
              "      <td>162</td>\n",
              "      <td>778</td>\n",
              "      <td>276</td>\n",
              "      <td>435</td>\n",
              "      <td>456</td>\n",
              "      <td>62.423409</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2660</th>\n",
              "      <td>2660</td>\n",
              "      <td>1124</td>\n",
              "      <td>250</td>\n",
              "      <td>358</td>\n",
              "      <td>423</td>\n",
              "      <td>315</td>\n",
              "      <td>446</td>\n",
              "      <td>405</td>\n",
              "      <td>272</td>\n",
              "      <td>448</td>\n",
              "      <td>75.963760</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2661 rows × 11 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7dc78dbb-dad7-450a-b41b-849c32967516')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-7dc78dbb-dad7-450a-b41b-849c32967516 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-7dc78dbb-dad7-450a-b41b-849c32967516');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Vh0OcintRCJX"
      },
      "outputs": [],
      "source": [
        "df1 = pd.DataFrame()\n",
        "df2 = pd.DataFrame()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-HssA9Mnwlve",
        "outputId": "48971375-ce1b-4c87-b683-73fdcd80183d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RangeIndex(start=0, stop=2661, step=1)"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "df.index"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        },
        "id": "IOIOrC0AwxyN",
        "outputId": "1aa22957-ea29-497f-8cfc-d674474dd153"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-ca6dfbc3f3ca>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mind\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m   \u001b[0mx1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'x1'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mind\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m   \u001b[0my1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'y1'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mind\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m   \u001b[0mx2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'x2'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mind\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m   \u001b[0my2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'y2'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mind\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'df' is not defined"
          ]
        }
      ],
      "source": [
        "for ind in df.index:\n",
        "  x1 = df['x1'][ind]\n",
        "  y1 = df['y1'][ind]\n",
        "  x2 = df['x2'][ind]\n",
        "  y2 = df['y2'][ind]\n",
        "  x3 = df['x3'][ind]\n",
        "  y3 = df['y3'][ind]\n",
        "  x4 = df['x4'][ind]\n",
        "  y4 = df['y4'][ind]\n",
        "  x5 = df['x1'][ind+2]\n",
        "  y5 = df['y1'][ind+2]\n",
        "  x6 = df['x2'][ind+2]\n",
        "  y6 = df['y2'][ind+2]\n",
        "  x7 = df['x3'][ind+2]\n",
        "  y7 = df['y3'][ind+2]\n",
        "  x8 = df['x4'][ind+2]\n",
        "  y8 = df['y4'][ind+2]\n",
        "  algorithm(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fFqPqxD19-HK",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 814
        },
        "outputId": "3b56652b-e578-45cc-fb6a-9ea2236bf51f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:28: RuntimeWarning: invalid value encountered in double_scalars\n",
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:82: RuntimeWarning: divide by zero encountered in long_scalars\n",
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:83: RuntimeWarning: divide by zero encountered in long_scalars\n",
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:84: RuntimeWarning: divide by zero encountered in long_scalars\n",
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:85: RuntimeWarning: divide by zero encountered in long_scalars\n",
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:86: RuntimeWarning: divide by zero encountered in long_scalars\n",
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:87: RuntimeWarning: divide by zero encountered in long_scalars\n",
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:88: RuntimeWarning: invalid value encountered in long_scalars\n",
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:89: RuntimeWarning: invalid value encountered in long_scalars\n",
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:102: RuntimeWarning: invalid value encountered in double_scalars\n",
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:103: RuntimeWarning: invalid value encountered in double_scalars\n",
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:104: RuntimeWarning: invalid value encountered in double_scalars\n",
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:105: RuntimeWarning: invalid value encountered in double_scalars\n",
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:107: RuntimeWarning: invalid value encountered in double_scalars\n",
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:110: RuntimeWarning: invalid value encountered in double_scalars\n",
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:28: RuntimeWarning: divide by zero encountered in double_scalars\n",
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:88: RuntimeWarning: divide by zero encountered in long_scalars\n",
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:108: RuntimeWarning: invalid value encountered in double_scalars\n",
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:109: RuntimeWarning: invalid value encountered in double_scalars\n",
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:30: RuntimeWarning: invalid value encountered in double_scalars\n",
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:109: RuntimeWarning: divide by zero encountered in double_scalars\n",
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:89: RuntimeWarning: divide by zero encountered in long_scalars\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/range.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m    384\u001b[0m                 \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 385\u001b[0;31m                     \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_range\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    386\u001b[0m                 \u001b[0;32mexcept\u001b[0m \u001b[0mValueError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: 2383 is not in range",
            "\nThe above exception was the direct cause of the following exception:\n",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-b9bfe21c48b3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    234\u001b[0m     \u001b[0mx4\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'x4'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mind\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    235\u001b[0m     \u001b[0my4\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'y4'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mind\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 236\u001b[0;31m     \u001b[0mx5\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'x1'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mind\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    237\u001b[0m     \u001b[0my5\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'y1'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mind\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    238\u001b[0m     \u001b[0mx6\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'x2'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mind\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/series.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    940\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    941\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mkey_is_scalar\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 942\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    943\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    944\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mis_hashable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/series.py\u001b[0m in \u001b[0;36m_get_value\u001b[0;34m(self, label, takeable)\u001b[0m\n\u001b[1;32m   1049\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1050\u001b[0m         \u001b[0;31m# Similar to Index.get_value, but we do not fall back to positional\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1051\u001b[0;31m         \u001b[0mloc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1052\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_values_for_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1053\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/range.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m    385\u001b[0m                     \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_range\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    386\u001b[0m                 \u001b[0;32mexcept\u001b[0m \u001b[0mValueError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 387\u001b[0;31m                     \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    388\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    389\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtolerance\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtolerance\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: 2383"
          ]
        }
      ],
      "source": [
        "#Algorithm for producing 3d orientation from 2d coordinates\n",
        "\n",
        "import math\n",
        "\n",
        "import numpy as np\n",
        "\n",
        "import pandas as pd\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "from mpl_toolkits.mplot3d import Axes3D\n",
        "\n",
        "\n",
        "def transl_2d_3d(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8):\n",
        "  cent_xi = (x1 + x2 + x3 + x4)/4 \n",
        "  cent_yi = (y1 + y2 + y3 + y4)/4\n",
        "  cent_xf = (x5 + x6 + x7 + x8)/4\n",
        "  cent_yf = (y5 + y6 + y7 + y8)/4\n",
        "  x_move = cent_xf - cent_xi\n",
        "  y_move = cent_yf - cent_yi\n",
        "  lo = [x_move,y_move]\n",
        "  d = math.sqrt((cent_xf - cent_xi)**2 + (cent_yf - cent_yi)**2)\n",
        "  vec = x_move,\"i\",'+',y_move,\"j\"\n",
        "  \n",
        "  A1 = 0.5*((x1*y2 + x2*y3 + x3*y4  + x4*y1)-(x2*y1 + x3*y2 + x4*y3 + x1*y4))\n",
        "  A2 = 0.5*((x5*y6 + x6*y7 + x7*y8  + x8*y5)-(x6*y5 + x7*y6 + x8*y7 + x5*y8))\n",
        "  f = 100\n",
        "  s = A2/A1\n",
        "  z1 = math.sqrt((f**2)*(s**2)/A1)\n",
        "  z2 = math.sqrt((f**2)*(s**2)/A2)\n",
        "  z_move = z2 - z1\n",
        "  M = np.matrix([[1, 0, 0, x_move],[0, 1, 0, y_move],[0, 0, 1, z_move],[0, 0, 0, 1]])\n",
        "  L_t = [\"X: \",x_move,\"Y:\",y_move,\"Z:\",z_move]\n",
        "  return L_t\n",
        "  \n",
        "\n",
        "\n",
        "def rot(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8):\n",
        "  #A1 = 0.5*((x1*y2 + x2*y3 + x3*y4  + x4*y1 )-(x2*y1 + x3*y2 + x4*y3 + x1*y4))\n",
        "  #A2 = 0.5*((x5*y6 + x6*y7 + x7*y8  + x8*y5 )-(x6*y5 + x7*y6 + x8*y7 + x5*y8))\n",
        "  #th_r = math.acos(A1/A2)\n",
        "  m1i = (y2-x1)/(x2-x1) \n",
        "  m2i = (y3-x2)/(x3-x2)\n",
        "  m3i = (y4-x3)/(x4-x3)\n",
        "  m4i = (y1-x4)/(x1-x4)\n",
        "  m1f = (y6-x5)/(x6-x5) \n",
        "  m2f = (y7-x6)/(x7-x6)\n",
        "  m3f = (y8-y7)/(x8-x7)\n",
        "  m4f = (y5-y8)/(x5-x8)\n",
        "  l1 = [m1i,m2i,m3i,m4i]\n",
        "  l1_o = [math.atan(m1i),math.atan(m2i),math.atan(m3i),math.atan(m4i)]\n",
        "  a = math.degrees(l1_o[0]+l1_o[1]+l1_o[2]+l1_o[3])\n",
        "  th_ri = (180-math.degrees(a))/4\n",
        "  l2 = [m1f,m2f,m3f,m4f]\n",
        "  l2_o = [math.atan(m1f),math.atan(m2f),math.atan(m3f),math.atan(m4f)]\n",
        "  b = math.degrees(l2_o[0]+l2_o[1]+l2_o[2]+l2_o[3])\n",
        "  th_rf = (180-math.degrees(b))/4\n",
        "  th_r = th_rf - th_ri\n",
        "  mid_x1i = (x1 + x4)/2\n",
        "  mid_y1i = (y1 + y4)/2\n",
        "  mid_x2i = (x2 + x3)/2\n",
        "  mid_y2i = (y2 + y3)/2\n",
        "  sli = (mid_y2i-mid_y1i)/(mid_x2i-mid_x1i)\n",
        "  mid_x1f = (x5 + x8)/2\n",
        "  mid_y1f = (y5 + y8)/2\n",
        "  mid_x2f = (x6 + x7)/2\n",
        "  mid_y2f = (y6 + y7)/2\n",
        "  slf = (mid_y2f-mid_y1f)/(mid_x2f-mid_x1f)\n",
        "  th_y = math.atan(abs(slf - sli)/(1 + slf*sli))\n",
        "  \n",
        "  a1i = math.atan(abs(m2i-m1i)/(1+m2i*m1i))\n",
        "  \n",
        "  a1f = a1i = math.atan(abs(m2f-m1f)/(1+m2f*m1f))\n",
        "  th_p = a1f - a1i\n",
        "  M_r = np.matrix([[1,0,0,0],[0,math.cos(th_r),-math.sin(th_r),0],[0,math.sin(th_r),math.cos(th_r),0],[0,0,0,1]])\n",
        "  M_y = np.matrix([[math.cos(th_y),-math.sin(th_y),0,0],[math.sin(th_y),math.cos(th_y),0,0],[0,0,1,0],[0,0,0,1]])\n",
        "  M_p = np.matrix([[math.cos(th_p),0,math.sin(th_p),0],[0,1,0,0],[-math.sin(th_p),0,math.cos(th_p),0],[0,0,0,1]])\n",
        "  M_t = M_r*M_p*M_y\n",
        "  return M_t\n",
        "\n",
        "def rot_o(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8):\n",
        "  m1i = (y2-x1)/(x2-x1) \n",
        "  m2i = (y3-x2)/(x3-x2)\n",
        "  m3i = (y4-x3)/(x4-x3)\n",
        "  m4i = (y1-x4)/(x1-x4)\n",
        "  m1f = (y6-x5)/(x6-x5) \n",
        "  m2f = (y7-x6)/(x7-x6)\n",
        "  m3f = (y8-y7)/(x8-x7)\n",
        "  m4f = (y5-y8)/(x5-x8)\n",
        "  l1 = [m1i,m2i,m3i,m4i]\n",
        "  a = 0\n",
        "  for i in range(len(l1)):\n",
        "    a = a + math.atan(l1[i])\n",
        "  th_ri = (180-math.degrees(a))/4\n",
        "  l2 = [m1f,m2f,m3f,m4f]\n",
        "  b = 0\n",
        "  for i in range(len(l2)):\n",
        "    b = b + math.atan(l2[i])\n",
        "  th_rf = (180-math.degrees(b))/4\n",
        "  th_r = th_rf - th_ri\n",
        "   \n",
        "  a1i = math.atan(abs(m2i-m1i)/(1+m2i*m1i))\n",
        "  a2i = math.atan(abs(m3i-m2i)/(1+m3i*m2i))\n",
        "  a3i = math.atan(abs(m4i-m3i)/(1+m4i*m3i))\n",
        "  a4i = math.atan(abs(m1i-m4i)/(1+m1i*m4i))\n",
        "\n",
        "  a1f = math.atan(abs(m2f-m1f)/(1+m2f*m1f))\n",
        "  a2f = math.atan(abs(m3f-m2f)/(1+m3f*m2f))\n",
        "  a3f = math.atan(abs(m4f-m3f)/(1+m4f*m3f))\n",
        "  a4f = math.atan(abs(m1f-m4f)/(1+m1f*m4f))\n",
        "\n",
        "  ey_i = a1i + a4i - a2i - a3i\n",
        "  ey_f = a1f + a2f - a2f - a3f\n",
        "\n",
        "  th_y = ey_f - ey_i\n",
        "\n",
        "  ep_i = a3i + a4i - a1i - a2i\n",
        "  ep_f = a3f + a4f - a1f - a2f\n",
        "\n",
        "  th_p = ep_f - ep_i\n",
        "  M_r = np.matrix([[1,0,0,0],[0,math.cos(th_r),-math.sin(th_r),0],[0,math.sin(th_r),math.cos(th_r),0],[0,0,0,1]])\n",
        "  M_y = np.matrix([[math.cos(th_y),-math.sin(th_y),0,0],[math.sin(th_y),math.cos(th_y),0,0],[0,0,1,0],[0,0,0,1]])\n",
        "  M_p = np.matrix([[math.cos(th_p),0,math.sin(th_p),0],[0,1,0,0],[-math.sin(th_p),0,math.cos(th_p),0],[0,0,0,1]])\n",
        "  M_t = M_r*M_p*M_y\n",
        "  \n",
        "  fr = 25\n",
        "  w_r = (fr)*th_r\n",
        "  w_p = (fr)*th_p\n",
        "  w_y = (fr)*th_y\n",
        "  L_w = ['W_r: ',\"{:.2f}\".format(w_r),'W_p: ',\"{:.2f}\".format(w_p),'W_y: ',\"{:.2f}\".format(w_r)]\n",
        "  L_a = [\"Roll:\",\"{:.2f}\".format(th_r),\"Pitch:\",\"{:.2f}\".format(th_p),\"Yaw:\",\"{:.2f}\".format(th_y)]\n",
        "\n",
        "  return L_a,L_w\n",
        "  \n",
        "\n",
        "  \n",
        "\n",
        "\n",
        "def v(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8):\n",
        "  fr = 25\n",
        "  M1 = transl_2d_3d(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8)\n",
        "  vx = (fr)*(M1[1])\n",
        "  vy = (fr)*(M1[3])\n",
        "  vz = (fr)*(M1[5])\n",
        "  L_v = ['Vx: ',vx,'Vy: ',vy,'Vz: ',vz]\n",
        "  return L_v\n",
        "\n",
        "\n",
        "def algorithm(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8):\n",
        "  T = transl_2d_3d(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8)\n",
        "  R = rot_o(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8)\n",
        "  M = T*R\n",
        "  V = v(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8)\n",
        "\n",
        "\n",
        "  P1 = np.matrix([[x1],[y1],[z1],[1]])\n",
        "  P2 = np.matrix([[x2],[y2],[z2],[1]])\n",
        "  P3 = np.matrix([[x3],[y3],[z3],[1]])\n",
        "  P4 = np.matrix([[x4],[y4],[z4],[1]])\n",
        "\n",
        "  P1_o = M*P1\n",
        "  P2_o = M*P2\n",
        "  P3_o = M*P3\n",
        "  P4_o = M*P4  \n",
        "\n",
        "  fig = plt.figure()\n",
        "\n",
        "  ax = plt.axes(projection='3d')\n",
        "\n",
        "  X_i = [x1, x2, x3, x4] \n",
        "  Y_i = [y1, y2, y3, y4]\n",
        "  Z_i = [z1, z2, z3, z4]\n",
        "  X_f = [P1_o[0],P2_o[0],P3_o[0],P4_o[0]]\n",
        "  Y_f = [P1_o[1],P2_o[1],P3_o[1],P4_o[1]]\n",
        "  Z_f = [P1_o[2],P2_o[2],P3_o[2],P4_o[2]]\n",
        "  ax.scatter3D(X_i,Y_i,Z_i,c='red', s=100);\n",
        "  ax.scatter3D(X_f,Y_f,Z_f,c='blue', s=100);\n",
        "  ax.set_xlabel('x-axis')\n",
        "  ax.set_ylabel('y-axis')\n",
        "  ax.set_zlabel('z-axis')\n",
        "\n",
        "  plt.show()\n",
        "  return M,V\n",
        "def algo2(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8):\n",
        "  L = [rot_o(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8),transl_2d_3d(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8),v(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8)]\n",
        "  return L\n",
        "\n",
        "\n",
        "\n",
        "f11 = open(\"Interactor_Rotation\",'w+')\n",
        "f12 = open(\"Interactor_Translation\",'w+')\n",
        "f13 = open(\"Interactor_Velocity\",'w+')\n",
        "\n",
        "f21 = open(\"Shaft_Rotation\",'w+')\n",
        "f22 = open(\"Shaft_Translation\",\"w+\")\n",
        "f23 = open(\"Shaft_Velocity\",\"w+\")\n",
        "\n",
        "\n",
        "\n",
        "data = pd.read_csv(\"tester_data.csv\")\n",
        "df = pd.DataFrame(data)\n",
        "for ind in (df.index):\n",
        "  if ind%2 == 0:\n",
        "    x1 = df['x1'][ind]\n",
        "    y1 = df['y1'][ind]\n",
        "    x2 = df['x2'][ind]\n",
        "    y2 = df['y2'][ind]\n",
        "    x3 = df['x3'][ind]\n",
        "    y3 = df['y3'][ind]\n",
        "    x4 = df['x4'][ind]\n",
        "    y4 = df['y4'][ind]\n",
        "    x5 = df['x1'][ind + 2]\n",
        "    y5 = df['y1'][ind + 2]\n",
        "    x6 = df['x2'][ind + 2]\n",
        "    y6 = df['y2'][ind + 2]\n",
        "    x7 = df['x3'][ind + 2]\n",
        "    y7 = df['y3'][ind + 2]\n",
        "    x8 = df['x4'][ind + 2]\n",
        "    y8 = df['y4'][ind + 2]\n",
        "  \n",
        "    content1 = str(transl_2d_3d(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8))+'\\n'\n",
        "    content2 = str(rot_o(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8))+'\\n'\n",
        "    content3 = str(v(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8))+'\\n'\n",
        "    f11.write(content2)\n",
        "    f12.write(content1)\n",
        "    f13.write(content3)\n",
        "  else:\n",
        "    x1 = df['x1'][ind]\n",
        "    y1 = df['y1'][ind]\n",
        "    x2 = df['x2'][ind]\n",
        "    y2 = df['y2'][ind]\n",
        "    x3 = df['x3'][ind]\n",
        "    y3 = df['y3'][ind]\n",
        "    x4 = df['x4'][ind]\n",
        "    y4 = df['y4'][ind]\n",
        "    x5 = df['x1'][ind + 2]\n",
        "    y5 = df['y1'][ind + 2]\n",
        "    x6 = df['x2'][ind + 2]\n",
        "    y6 = df['y2'][ind + 2]\n",
        "    x7 = df['x3'][ind + 2]\n",
        "    y7 = df['y3'][ind + 2]\n",
        "    x8 = df['x4'][ind + 2]\n",
        "    y8 = df['y4'][ind + 2]\n",
        "    A = 0.5*((x1*y2 + x2*y3 + x3*y4  + x4*y1 )-(x2*y1 + x3*y2 + x4*y3 + x1*y4))\n",
        "    content1 = str(transl_2d_3d(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8))+'\\n'\n",
        "    content2 = str(rot_o(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8))+'\\n'\n",
        "    content3 = str(v(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8))+'\\n'\n",
        "    f21.write(content2)\n",
        "    f22.write(content1)\n",
        "    f23.write(content3)\n",
        "\n",
        "f11.close()\n",
        "f12.close()\n",
        "f13.close()\n",
        "f21.close()\n",
        "f22.close()\n",
        "f23.close()\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import mpl_toolkits.mplot3d.axes3d as p3\n",
        "import matplotlib.animation as animation\n",
        "\n",
        "# Fixing random state for reproducibility\n",
        "np.random.seed(19680801)\n",
        "\n",
        "# Attaching 3D axis to the figure\n",
        "fig = plt.figure()\n",
        "ax = p3.Axes3D(fig)\n",
        "ax.set_xlim3d([0.0, 10])\n",
        "ax.set_xlabel('X')\n",
        "\n",
        "ax.set_ylim3d([0.0, 10])\n",
        "ax.set_ylabel('Y')\n",
        "\n",
        "ax.set_zlim3d([0.0, 10])\n",
        "ax.set_zlabel('Z')\n",
        "\n",
        "ax.set_title('3D Test')\n",
        "\n",
        "obj = \n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 336
        },
        "id": "gM7f2FF6pite",
        "outputId": "e8aa855e-fffb-4c6f-e9bc-8d82dbbc3cd4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 0.92, '3D Test')"
            ]
          },
          "metadata": {},
          "execution_count": 4
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "wdmHAw4sgw2w"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "Area = []\n",
        "data = pd.read_csv(\"action_dataset_images.csv\")\n",
        "df = pd.DataFrame(data)\n",
        "#for i in df.index:\n",
        " # x1 = df['x1'][i]\n",
        " # y1 = df['y1'][i]\n",
        " # x2 = df['x2'][i]\n",
        " # y2 = df['y2'][i]\n",
        " # x3 = df['x3'][i]\n",
        " # y3 = df['y3'][i]\n",
        " # x4 = df['x4'][i]\n",
        " # y4 = df['y4'][i]\n",
        "  \n",
        "  #A = 0.5*((x1*y2 + x2*y3 + x3*y4  + x4*y1 )-(x2*y1 + x3*y2 + x4*y3 + x1*y4))\n",
        "  #Area.append(A)\n",
        "  \n",
        "#df.insert(2,\"Area\",Area,True)\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 505
        },
        "id": "Rr2BCpgEd1zu",
        "outputId": "6479e692-e8ff-4e50-bb68-d938de54d96f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Count  Image Number     x1     y1     x2     y2     x3     y3     x4  \\\n",
              "0        0.0           0.0  259.0  145.0  698.0  -47.0  753.0   77.0  314.0   \n",
              "1        1.0           0.0  150.0  225.0  317.0  166.0  347.0  251.0  180.0   \n",
              "2        2.0           1.0  259.0  145.0  698.0  -47.0  753.0   77.0  314.0   \n",
              "3        3.0           1.0  150.0  226.0  317.0  166.0  347.0  251.0  180.0   \n",
              "4        4.0           2.0  259.0  145.0  698.0  -47.0  753.0   77.0  314.0   \n",
              "...      ...           ...    ...    ...    ...    ...    ...    ...    ...   \n",
              "2378  2656.0        1122.0  264.0  324.0  443.0  324.0  443.0  414.0  264.0   \n",
              "2379  2657.0        1123.0  377.0  340.0  718.0  162.0  778.0  276.0  437.0   \n",
              "2380  2658.0        1123.0  252.0  351.0  428.0  316.0  446.0  406.0  270.0   \n",
              "2381  2659.0        1124.0  375.0  341.0  718.0  162.0  778.0  276.0  435.0   \n",
              "2382  2660.0        1124.0  250.0  358.0  423.0  315.0  446.0  405.0  272.0   \n",
              "\n",
              "         y4      angle      Area check  \n",
              "0     270.0  66.217964  130486.0  GOOD  \n",
              "1     311.0  70.416008   32127.0  GOOD  \n",
              "2     270.0  66.223656  130486.0  GOOD  \n",
              "3     311.0  70.312881   31990.0  GOOD  \n",
              "4     270.0  66.225143  130486.0  GOOD  \n",
              "...     ...        ...       ...   ...  \n",
              "2378  414.0  90.000000   32220.0  GOOD  \n",
              "2379  454.0  62.439392   99108.0  GOOD  \n",
              "2380  441.0  78.690071   32940.0  GOOD  \n",
              "2381  456.0  62.423409  100087.0  GOOD  \n",
              "2382  448.0  75.963760   33165.0  GOOD  \n",
              "\n",
              "[2383 rows x 13 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6f68d70a-41de-4a15-ae17-77b5d0d99459\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Count</th>\n",
              "      <th>Image Number</th>\n",
              "      <th>x1</th>\n",
              "      <th>y1</th>\n",
              "      <th>x2</th>\n",
              "      <th>y2</th>\n",
              "      <th>x3</th>\n",
              "      <th>y3</th>\n",
              "      <th>x4</th>\n",
              "      <th>y4</th>\n",
              "      <th>angle</th>\n",
              "      <th>Area</th>\n",
              "      <th>check</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>259.0</td>\n",
              "      <td>145.0</td>\n",
              "      <td>698.0</td>\n",
              "      <td>-47.0</td>\n",
              "      <td>753.0</td>\n",
              "      <td>77.0</td>\n",
              "      <td>314.0</td>\n",
              "      <td>270.0</td>\n",
              "      <td>66.217964</td>\n",
              "      <td>130486.0</td>\n",
              "      <td>GOOD</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>150.0</td>\n",
              "      <td>225.0</td>\n",
              "      <td>317.0</td>\n",
              "      <td>166.0</td>\n",
              "      <td>347.0</td>\n",
              "      <td>251.0</td>\n",
              "      <td>180.0</td>\n",
              "      <td>311.0</td>\n",
              "      <td>70.416008</td>\n",
              "      <td>32127.0</td>\n",
              "      <td>GOOD</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>259.0</td>\n",
              "      <td>145.0</td>\n",
              "      <td>698.0</td>\n",
              "      <td>-47.0</td>\n",
              "      <td>753.0</td>\n",
              "      <td>77.0</td>\n",
              "      <td>314.0</td>\n",
              "      <td>270.0</td>\n",
              "      <td>66.223656</td>\n",
              "      <td>130486.0</td>\n",
              "      <td>GOOD</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>150.0</td>\n",
              "      <td>226.0</td>\n",
              "      <td>317.0</td>\n",
              "      <td>166.0</td>\n",
              "      <td>347.0</td>\n",
              "      <td>251.0</td>\n",
              "      <td>180.0</td>\n",
              "      <td>311.0</td>\n",
              "      <td>70.312881</td>\n",
              "      <td>31990.0</td>\n",
              "      <td>GOOD</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>259.0</td>\n",
              "      <td>145.0</td>\n",
              "      <td>698.0</td>\n",
              "      <td>-47.0</td>\n",
              "      <td>753.0</td>\n",
              "      <td>77.0</td>\n",
              "      <td>314.0</td>\n",
              "      <td>270.0</td>\n",
              "      <td>66.225143</td>\n",
              "      <td>130486.0</td>\n",
              "      <td>GOOD</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2378</th>\n",
              "      <td>2656.0</td>\n",
              "      <td>1122.0</td>\n",
              "      <td>264.0</td>\n",
              "      <td>324.0</td>\n",
              "      <td>443.0</td>\n",
              "      <td>324.0</td>\n",
              "      <td>443.0</td>\n",
              "      <td>414.0</td>\n",
              "      <td>264.0</td>\n",
              "      <td>414.0</td>\n",
              "      <td>90.000000</td>\n",
              "      <td>32220.0</td>\n",
              "      <td>GOOD</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2379</th>\n",
              "      <td>2657.0</td>\n",
              "      <td>1123.0</td>\n",
              "      <td>377.0</td>\n",
              "      <td>340.0</td>\n",
              "      <td>718.0</td>\n",
              "      <td>162.0</td>\n",
              "      <td>778.0</td>\n",
              "      <td>276.0</td>\n",
              "      <td>437.0</td>\n",
              "      <td>454.0</td>\n",
              "      <td>62.439392</td>\n",
              "      <td>99108.0</td>\n",
              "      <td>GOOD</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2380</th>\n",
              "      <td>2658.0</td>\n",
              "      <td>1123.0</td>\n",
              "      <td>252.0</td>\n",
              "      <td>351.0</td>\n",
              "      <td>428.0</td>\n",
              "      <td>316.0</td>\n",
              "      <td>446.0</td>\n",
              "      <td>406.0</td>\n",
              "      <td>270.0</td>\n",
              "      <td>441.0</td>\n",
              "      <td>78.690071</td>\n",
              "      <td>32940.0</td>\n",
              "      <td>GOOD</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2381</th>\n",
              "      <td>2659.0</td>\n",
              "      <td>1124.0</td>\n",
              "      <td>375.0</td>\n",
              "      <td>341.0</td>\n",
              "      <td>718.0</td>\n",
              "      <td>162.0</td>\n",
              "      <td>778.0</td>\n",
              "      <td>276.0</td>\n",
              "      <td>435.0</td>\n",
              "      <td>456.0</td>\n",
              "      <td>62.423409</td>\n",
              "      <td>100087.0</td>\n",
              "      <td>GOOD</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2382</th>\n",
              "      <td>2660.0</td>\n",
              "      <td>1124.0</td>\n",
              "      <td>250.0</td>\n",
              "      <td>358.0</td>\n",
              "      <td>423.0</td>\n",
              "      <td>315.0</td>\n",
              "      <td>446.0</td>\n",
              "      <td>405.0</td>\n",
              "      <td>272.0</td>\n",
              "      <td>448.0</td>\n",
              "      <td>75.963760</td>\n",
              "      <td>33165.0</td>\n",
              "      <td>GOOD</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2383 rows × 13 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6f68d70a-41de-4a15-ae17-77b5d0d99459')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-6f68d70a-41de-4a15-ae17-77b5d0d99459 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-6f68d70a-41de-4a15-ae17-77b5d0d99459');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "6E6zwGUlMV0J"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "name": "Implementation.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyOom0xsoQFmEiPoJvcT9eUi",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}